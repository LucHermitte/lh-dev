*lh-dev.txt*            Vim library for development oriented scripts (v001)
                        For Vim version 7+.    Last change: $Date$

                        By Luc Hermitte
                        hermitte {at} free {dot} fr


------------------------------------------------------------------------------
CONTENTS                                      *lhdev-contents*      {{{1
|lhdev-presentation|    Presentation
|lhdev-filetype|        Filetype polymorphism
|lhdev-naming|          Naming policies
|add-local-help|        Instructions on installing this file (:helptags %:h)


------------------------------------------------------------------------------
PRESENTATION                            *lhdev-presentation* {{{1
|lh-dev| is a library that defines some common VimL functions I use to
implements development oriented plugins and ftplugins.
This library has been conceived as a suite of |autoload| plugins.  As such, it
requires Vim 7+.


------------------------------------------------------------------------------
FILETYPE POLYMORPHISM                   *lhdev-filetype* {{{1

                                                *lh#dev#option#get()*
lh#dev#option#get({name}, {ft}, {default} [,{scopes}])~
@return which ever exists first among: b:{ft}_{name}, or g:{ft}_{name}, or
b:{name}, or g:{name}. {default} is returned if none exists.
@note filetype inheritance is supported.
The order of the scopes for the variables checked can be specified through the
optional argument {scope}

                                                *lh#dev#option#call()*
lh#dev#option#call({name}, {ft} [, parameters])~
@return lh#dev#{ft}#{name}({parameters}) if it exists, or
lh#dev#{name}({parameters}) otherwise
If {name} is a |List|, then the function name used is: {name}[0]#{ft}#{name}[1]
@note filetype inheritance is supported.

------------------------------------------------------------------------------
NAMING POLICIES                         *lhdev-naming* {{{1

Functions~

Transforms {id} into a:

- variable name:*lh#dev#naming#variable()*
  Options: *(b|g):{ft_}strip_re* *(b|g):{ft_}strip_subst* 

- into a getter name: *lh#dev#naming#getter()*
  Options: *(b|g):{ft_}get_re* *(b|g):{ft_}get_subst*

- into a setter name: *lh#dev#naming#setter()*
  Options: *(b|g):{ft_}set_re* *(b|g):{ft_}set_subst*

- into a full access getter name: *lh#dev#naming#ref_getter()*
  Options: *(b|g):{ft_}ref_re* *(b|g):{ft_}ref_subst*

- into a getter (through proxy) name: *lh#dev#naming#proxy_getter()*
  Options: *(b|g):{ft_}proxy_re* *(b|g):{ft_}proxy_subst*

- into a global variable name: *lh#dev#naming#global()*
  Options: *(b|g):{ft_}global_re* *(b|g):{ft_}global_subst*

- into a local variable name: *lh#dev#naming#local()*
  Options: *(b|g):{ft_}local_re* *(b|g):{ft_}local_subst*

- into a member variable name: *lh#dev#naming#member()*
  Options: *(b|g):{ft_}member_re* *(b|g):{ft_}member_subst*

- into a static variable name: *lh#dev#naming#static()*
  Options: *(b|g):{ft_}static_re* *(b|g):{ft_}static_subst*

- into a constant name: *lh#dev#naming#constant()*
  Options: *(b|g){ft_}constant_re* *(b|g){ft_}constant_subst*

- into a parameter name: *lh#dev#naming#param()*
  Options: *(b|g){ft_}param_re* *(b|g){ft_}param_subst*


*lh#dev#naming#to_lower_camel_case()*
*lh#dev#naming#to_upper_camel_case()*
*lh#dev#naming#to_underscore()*

Options~
Format: (b|g):{ft_}naming_{option}
Examples:
- g:vim_naming_param_re : global specialization used to extract name to build
  a parameter name, when working on vim-scripts.
- b:cpp_naming_global_subst : project-local specialization used to produced a
  global variable name from a data name.


Mappings~

------------------------------------------------------------------------------
 © Luc Hermitte, 2011, http://code.google.com/p/lh-vim/
 $Id$
 VIM: let b:VS_language = 'american' 
 vim:ts=8:sw=4:tw=80:fo=tcq2:isk=!-~,^*,^\|,^\":ft=help:fdm=marker:
